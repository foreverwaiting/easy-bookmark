(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{296:function(t,a,s){"use strict";s.r(a);var r=s(13),v=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_2022-01"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2022-01"}},[t._v("#")]),t._v(" 2022-01")]),t._v(" "),a("h2",{attrs:{id:"_11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11"}},[t._v("#")]),t._v(" 11")]),t._v(" "),a("h3",{attrs:{id:"javascript-运行【解释型】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-运行【解释型】"}},[t._v("#")]),t._v(" JavaScript 运行【解释型】")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/jNynCQMd1g9-e_VzlKvA5g",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 运行"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("1、将我们能看得懂的代码转换为计算机可读的机器代码有两种方式：解释和编译")]),t._v(" "),a("ul",[a("li",[t._v("编译：直接可转为计算机处理器可以执行的机器代码。\n"),a("ul",[a("li",[t._v("需要“构建”")]),t._v(" "),a("li",[t._v("【C、C ++、Erlang、Haskell、Rust 和 Go】")]),t._v(" "),a("li",[t._v("编译器来编译，系统执行")])])]),t._v(" "),a("li",[t._v("解释：通过一个解释器逐行解释并执行程序的每个命令\n"),a("ul",[a("li",[t._v("（在运行时翻译代码的过程增加了开销，解释型语言曾经比编译型语言慢很多）。")]),t._v(" "),a("li",[t._v("需要“解释”")]),t._v(" "),a("li",[t._v("【PHP、Ruby、Python 和 JavaScript。】")]),t._v(" "),a("li",[t._v("解释器解释并执行")])])])]),t._v(" "),a("p",[t._v("2、js 解释型")]),t._v(" "),a("ul",[a("li",[t._v("JavaScript 引擎就是“解释器”")]),t._v(" "),a("li",[t._v("所有浏览器都内置了解释器。著名 V8")]),t._v(" "),a("li",[t._v("所有的 JavaScript 引擎都会包含一个调用栈和一个内存堆")])]),t._v(" "),a("p",[t._v("3、运行时环境（JavaScript 引擎并不能孤立运行，它需要一个好的运行时环境才能发挥更大的作用）")]),t._v(" "),a("ul",[a("li",[t._v("Node.js 就是一个 JavaScript 运行时环境")]),t._v(" "),a("li",[t._v("各种浏览器也是 JavaScript 的运行时环境")]),t._v(" "),a("li",[t._v("运行环境提供：\n"),a("ul",[a("li",[t._v("事件处理、")]),t._v(" "),a("li",[t._v("网络请求 API、")]),t._v(" "),a("li",[t._v("回调队列或消息队列、")]),t._v(" "),a("li",[t._v("事件循环")])])])]),t._v(" "),a("p",[t._v("4、JavaScript 引擎怎么配合这些能力在运行时环境（如 chrome）中发挥作用呢？")]),t._v(" "),a("ul",[a("li",[t._v("浏览器进程：浏览器最核心的进程，负责管理各个标签页的创建和销毁、页面显示和功能（前进，后退，收藏等）、网络资源的管理，下载等。")]),t._v(" "),a("li",[t._v("插件进程：负责每个第三方插件的使用，每个第三方插件使用时候都会创建一个对应的进程、这可以避免第三方插件 crash 影响整个浏览器、也方便使用沙盒模型隔离插件进程，提高浏览器稳定性。")]),t._v(" "),a("li",[t._v("GPU 进程：负责 3D 绘制和硬件加速")]),t._v(" "),a("li",[t._v("渲染进程：浏览器会为每个窗口分配一个渲染进程、也就是我们常说的"),a("code",[t._v("浏览器内核")]),t._v("，这可以避免单个 page crash 影响整个浏览器。")])]),t._v(" "),a("p",[t._v("5、浏览器内核 webkit（即渲染进程），是多线程的")]),t._v(" "),a("ul",[a("li",[t._v("GUI 渲染线程：负责渲染浏览器界面 HTML 元素,当界面需要重绘(Repaint)或由于某种操作引发回流(reflow)时,该线程就会执行。")]),t._v(" "),a("li",[t._v("定时触发器线程：浏览器定时计数器并不是由 JavaScript 引擎计数的, 因为 JavaScript 引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确, 因此通过单独线程来计时并触发定时是更为合理的方案。")]),t._v(" "),a("li",[t._v("事件触发线程：当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待 JS 引擎的处理。这些事件可以是当前执行的代码块如定时任务、也可来自浏览器内核的其他线程如鼠标点击、AJAX 异步请求等，但由于 JS 的单线程关系所有这些事件都得排队等待 JS 引擎处理。")]),t._v(" "),a("li",[t._v("异步 http 请求线程：XMLHttpRequest 在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到 JavaScript 引擎的处理队列中等待处理。")]),t._v(" "),a("li",[t._v("JavaScript 引擎线程：解释和执行 JavaScript 代码。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("说明")]),t._v(" "),a("p",[t._v("GUI 渲染线程与 JavaScript 引擎为互斥的关系，当 JavaScript 引擎执行时 GUI 线程会被挂起， GUI 更新会被保存在一个队列中等到引擎线程空闲时立即被执行。")])]),t._v(" "),a("p",[t._v("6、v8")]),t._v(" "),a("ul",[a("li",[t._v("解析器（Parser）：负责将 JavaScript 代码转换成 AST 抽象语法树。（词法分析和语法分析和上下文）\n"),a("ul",[a("li",[t._v("词法分析就是将字符序列转换为标记（token）序列的过程")]),t._v(" "),a("li",[t._v("语法分析 将这些 token 根据语法规则转换为 AST")])])]),t._v(" "),a("li",[t._v("解释器（Ignition）：负责将 AST 转换为字节码，并收集编译器需要的优化编译信息。")]),t._v(" "),a("li",[t._v("编译器（TurboFan）：利用解释器收集到的信息，将字节码转换为优化的机器码。")])]),t._v(" "),a("p",[t._v("7、同时采用了解释执行和编译执行这两种方式，这种混合使用的方式就称为 JIT (即时编译)")]),t._v(" "),a("h3",{attrs:{id:"css-实现优惠券"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-实现优惠券"}},[t._v("#")]),t._v(" CSS 实现优惠券")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("radial-gradient 径向渐变")])]),t._v(" "),a("li",[a("p",[t._v("css 之 mask")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/zechRBhpYy48smFQKvtb0g",target:"_blank",rel:"noopener noreferrer"}},[t._v("demo"),a("OutboundLink")],1)])])]),t._v(" "),a("h3",{attrs:{id:"css-垂直排版"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-垂直排版"}},[t._v("#")]),t._v(" css 垂直排版")]),t._v(" "),a("p",[t._v("1）竖向展示排版通过 writing-mode 可快速实现")]),t._v(" "),a("p",[t._v("2）对于部分数字需要“直立向上”时，采用 text-orientation:upright 方法")]),t._v(" "),a("p",[t._v("3）日期类字符（2-4 字符）可以通过 text-combine-upright 属性横向合并优化展示")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.zhangxinxu.com/wordpress/2021/02/css-text-combine-upright/?fileGuid=RPdpCPygrdKdJcQG",target:"_blank",rel:"noopener noreferrer"}},[t._v("demo"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"随机数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#随机数"}},[t._v("#")]),t._v(" 随机数")]),t._v(" "),a("p",[t._v("所有可以使用算法生成的随机数都可以看成是伪随机数，真随机数应该是存在自然界，例如粒子的起伏，声音的噪点，分子的分布等")]),t._v(" "),a("ul",[a("li",[t._v("Math.random()：")]),t._v(" "),a("li",[t._v("crypto.getRandomValues(typedArray: Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array 或者 Uint32Array):\n"),a("ul",[a("li",[t._v("self.crypto.getRandomValues(new Uint32Array(1))[0];")]),t._v(" "),a("li",[t._v("self.crypto.randomUUID();")])])])]),t._v(" "),a("h2",{attrs:{id:"_10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10"}},[t._v("#")]),t._v(" 10")]),t._v(" "),a("h3",{attrs:{id:"esbuild"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#esbuild"}},[t._v("#")]),t._v(" Esbuild")]),t._v(" "),a("p",[t._v("1、基于 Golang 开发的一款打包工具，相比传统的打包工具，主打性能优势，在构建速度上可以快 10~100 倍。优势：")]),t._v(" "),a("ul",[a("li",[t._v("多线程共享内存：充分利用多线程打包，并且线程之间共享内容，而 JS 如果使用多线程还需要有线程通信(postMessage)的开销；")]),t._v(" "),a("li",[t._v("直接编译成机器码，而不用像 Node 一样先将 JS 代码解析为字节码，然后转换为机器码，大大节省了程序运行时间。")]),t._v(" "),a("li",[t._v("没有任何第三方库")]),t._v(" "),a("li",[t._v("高效利用内存：在 JS 开发的传统打包工具当中一般会频繁地解析和传递 AST 数据，比如 string -> TS -> JS -> string，这其中会涉及复杂的编译工具链，比如 webpack -> babel -> terser，每次接触到新的工具链，都得重新解析 AST，导致大量的内存占用。而 Esbuild 中从头到尾尽可能地复用一份 AST 节点数据，从而大大提高了内存的利用效率，提升编译性能。")])]),t._v(" "),a("p",[t._v("2、缺点：")]),t._v(" "),a("ul",[a("li",[t._v("没有 TS 类型检查")]),t._v(" "),a("li",[t._v("不能操作 AST")]),t._v(" "),a("li",[t._v("不支持装饰器语法")]),t._v(" "),a("li",[t._v("产物 target 无法降级到 ES5 及以下")])]),t._v(" "),a("p",[t._v("3、demo\nhttps://github.com/sanyuan0704/ewas")]),t._v(" "),a("h3",{attrs:{id:"热更新-hmr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#热更新-hmr"}},[t._v("#")]),t._v(" 热更新 HMR")]),t._v(" "),a("p",[t._v("https://mp.weixin.qq.com/s/s11mkXEK5ZHSbjHsKye-5A")]),t._v(" "),a("h3",{attrs:{id:"动态图片生成方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态图片生成方案"}},[t._v("#")]),t._v(" 动态图片生成方案")]),t._v(" "),a("ul",[a("li",[t._v("canvas2html 前端生成图片")]),t._v(" "),a("li",[t._v("Puppeteer+Nodejs 服务端生成")]),t._v(" "),a("li",[t._v("Golang + Nodejs 最终实现方案")])]),t._v(" "),a("h2",{attrs:{id:"_9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9"}},[t._v("#")]),t._v(" 9")]),t._v(" "),a("h3",{attrs:{id:"正确使用-sourcemap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正确使用-sourcemap"}},[t._v("#")]),t._v(" 正确使用 Sourcemap")]),t._v(" "),a("p",[t._v("1、Sourcemap 由三部分组成:")]),t._v(" "),a("ul",[a("li",[t._v("开发者编写的原始代码")]),t._v(" "),a("li",[t._v("经过 Webpack、Rollup 等工程化工具压缩、转化、合并后的产物，且产物中必须包含指向 "),a("code",[t._v("Sourcemap")]),t._v(" 文件地址的 "),a("code",[t._v("//# sourceMappingURL=https://xxxx/bundle.js.map")]),t._v(" 指令")]),t._v(" "),a("li",[t._v("记录原始代码与经过工程化处理代码之间位置映射关系 Map 文件")])]),t._v(" "),a("p",[t._v("2、以 Webpack 为例，设置 devtool = 'source-map' 即可同时打包出代码产物 xxx.js 文件与同名 xxx.js.map 文件，Map 文件通常为 JSON 格式，内容如：")]),t._v(" "),a("ul",[a("li",[t._v("使用时，浏览器会按照 mappings 记录的数值关系，将产物代码映射回 sourcesContent 数组所记录的原始代码文件、行、列位置")]),t._v(" "),a("li")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"version"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指代 sourcemap 版本，目前最新版本为 3")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"sourceRoot"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//字符串，源文件根目录")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"file"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"main.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//字符串，该 Sourcemap 文件对应的编译产物文件名")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"names"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"console"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"log"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//字符串数组，记录原始代码中出现的变量名")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"mappings"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('";;;;;AAAA,IAAMA,IAAI,GAAG,QAAb;AAEAC,OAAO,CAACC,GAAR,CAAYF,IAAZ,E"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//字符串数组，记录打包产物与原始代码的位置映射关系")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"sources"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//字符串数组，原始文件路径名，与 sourcesContent 内容一一对应")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"webpack:///./src/index.js"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"sourcesContent"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//字符串数组，原始代码的内容")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"const name = 'tecvan';\\n\\nconsole.log(name)\"")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("3、应用")]),t._v(" "),a("ul",[a("li",[t._v("对于开发环境，适合使用：\n"),a("ul",[a("li",[t._v("eval：速度极快，但只能看到原始文件结构，看不到打包前的代码内容")]),t._v(" "),a("li",[t._v("cheap-eval-source-map：速度比较快，可以看到打包前的代码内容，但看不到 loader 处理之前的源码")]),t._v(" "),a("li",[t._v("cheap-module-eval-source-map：速度比较快，可以看到 loader 处理之前的源码，不过定位不到列级别")]),t._v(" "),a("li",[t._v("eval-source-map：初次编译较慢，但定位精度最高")])])]),t._v(" "),a("li",[t._v("对于生产环境，则适合使用：\n"),a("ul",[a("li",[t._v("source-map：信息最完整，但安全性最低，外部用户可轻易获取到压缩、混淆之前的源码，慎重使用")]),t._v(" "),a("li",[t._v("hidden-source-map：信息较完整，安全性较低，外部用户获取到 .map 文件地址时依然可以拿到源码")]),t._v(" "),a("li",[t._v("nosources-source-map：源码信息确实，但安全性较高，需要配合 Sentry 等工具实现完整的 Sourcemap 映射")])])])]),t._v(" "),a("p",[t._v("4、页面初始运行时只会加载编译构建产物，直到特定事件发生 —— 例如在 Chrome 打开 Devtool 面板时，才会根据 "),a("code",[t._v("//# sourceMappingURL")]),t._v(" 内容自动加载 Map 文件，并按 Sourcemap 协议约定的映射规则将代码重构还原回原始形态，这既能保证终端用户的性能体验，又能帮助开发者快速还原现场，提升线上问题的定位与调试效率。")]),t._v(" "),a("h3",{attrs:{id:"http-提交数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-提交数据"}},[t._v("#")]),t._v(" HTTP 提交数据")]),t._v(" "),a("p",[t._v("五种：url param、query、form-urlencoded、form-data、json")]),t._v(" "),a("p",[t._v("通过 url 提交数据有大小限制，通过 body 提交数据的没有限制")]),t._v(" "),a("p",[t._v("url 方式的：")]),t._v(" "),a("ul",[a("li",[t._v("url param：Restful 的规范允许把参数写在 url 中")]),t._v(" "),a("li",[t._v("query：通过 url 中 ？后面的用 & 分隔的字符串传递数据 （非英文的字符和一些特殊字符要经过编码，可以使用 encodeURLComponent 的 api，或者使用封装了一层的 qeury-string 库来处理）")])]),t._v(" "),a("p",[t._v("body 方式的：charles 抓包可以看到")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("form 表单："),a("code",[t._v("content-type 是 application/x-www-form-urlencoded")])]),t._v(" "),a("ul",[a("li",[t._v("它和 query 字符串的方式的区别只是放在了 body 里")]),t._v(" "),a("li",[t._v("因为也是 query 字符串，所以也要用 encodeURIComponent 的 api 或者 query-string 库处理下")]),t._v(" "),a("li",[t._v("通过 & 分隔的 form-urlencoded 的方式需要对内容做 url encode，如果传递大量的数据，比如上传文件的时候就不是很合适了，因为文件 encode 一遍的话太慢了，这时候就可以用 form-data")]),t._v(" "),a("li",[t._v("对内容做 url encode")])])]),t._v(" "),a("li",[a("p",[t._v("form data: "),a("code",[t._v("content type 为 multipart/form-data")])]),t._v(" "),a("ul",[a("li",[t._v("不再是通过 & 分隔数据，而是用 --------- + 一串数字做为分隔符。因为不是 url 的方式了，自然也不用再做 url encode")]),t._v(" "),a("li",[t._v("通过 boundary 分隔内容")]),t._v(" "),a("li",[t._v("适合传文件")])])]),t._v(" "),a("li",[a("p",[t._v("json："),a("code",[t._v("content type 为 application/json")])])])])])}),[],!1,null,null,null);a.default=v.exports}}]);