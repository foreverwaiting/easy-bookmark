(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{326:function(t,i,e){"use strict";e.r(i);var n=e(13),r=Object(n.a)({},(function(){var t=this,i=t._self._c;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"版本控制等"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#版本控制等"}},[t._v("#")]),t._v(" 版本控制等")]),t._v(" "),i("h2",{attrs:{id:"git-svn"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-svn"}},[t._v("#")]),t._v(" git svn")]),t._v(" "),i("h3",{attrs:{id:"git基础操作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git基础操作"}},[t._v("#")]),t._v(" git基础操作")]),t._v(" "),i("p",[t._v("git仓库可以记录你对文件的一切操作，并还原，适合多人开发项目使用")]),t._v(" "),i("p",[t._v("git 只能跟踪纯文本文件，文本是有编码的，为了统一，强烈寻底使用utf-8")]),t._v(" "),i("p",[t._v("git安装，下载git，安装好之后，右键就有Git Bash Here")]),t._v(" "),i("p",[t._v("安装git后配置名字和邮箱，所有git仓库都会使用这个配置")]),t._v(" "),i("p",[t._v("git config --global user.name 'tom' 定义用户名\ngit config --global user.email 'tom@qq.com' 定义邮箱\n配置好了名字和邮箱，则创建git仓库，在选好的文件夹内打开右键打开Git Bash Here")]),t._v(" "),i("p",[t._v("git init 初始化这个文件夹为git仓库\n当你在这个仓库中创建文件还是对文件的修改以及删除，都会被记录在内，当然，每次操作，需要命令记录下来，这又分为工作区，暂存区，版本库")]),t._v(" "),i("p",[t._v("工作区：在文件夹直接修改的区域")]),t._v(" "),i("p",[t._v("暂存区：已经将工作区修改的内容提交的区域")]),t._v(" "),i("p",[t._v("版本库：将暂存区的内容提交过来，使得版本库和工作区相同，其实版本库才是记录所有文件的修改记录")]),t._v(" "),i("p",[t._v("提交至暂存区，提交到版本库，一定要先提交暂存区，再提交版本库")]),t._v(" "),i("p",[t._v("git add a.txt 将修改的文件添加到暂存区\ngit add * 将修改的所有文件都会添加到暂存区\ngit commit -m '修改了文件' 将暂存区的文件全部提交到git仓库，使得git仓库和工作区相同，-m 是描述对此次提交文件\ngit rm a.txt 在工作区删除了文件，不需要添加到暂存区，直接使用这个命令会记录删除文件的信息，再使用git commit -m '删除了文件' 提交删除文件的记录\n还原文件")]),t._v(" "),i("p",[t._v("git log 查看过去历史，就是所有对文件的操作，都显示出来，会有一个序列号，通过序列号还原到那次对文件的操作\ngit reflog 查看所有历史\ngit reset --hard 序列号 序列号不需要全部填写，前面的一小部分就行\n查看版本库的状态")]),t._v(" "),i("p",[t._v("git status 查看版本库的状态，工作区修改有没有添加到暂存区，暂存区有文件有没有提交版本库\ngit diff a.txt 查看工作区和暂存区不同\ngit diff --staged a.txt 查看暂存区和版本库的不同\ngit diff head -- a.txt 查看工作区和版本库的不同\n克隆远程库，下载网上的git仓库")]),t._v(" "),i("p",[t._v("git clone https://github.com/Lonely-Yu/Rain.git 克隆远程库，记住在你想放库的文件夹打开Git Bash Here来执行\n当然你要修改你自己的远程库，需要推送和拉取，这时候需要账号和密码，也是先添加到本地的暂存区，再提交到本地的版本库，再拉取一下远程库，再推送过去")]),t._v(" "),i("p",[t._v("git add * 添加到暂存区\ngit commit -m '描述' 提交到版本库\ngit pull 拉取远程库，因为怕其他人在我克隆库之后修改了库，拉取远程库的话，会把他修改的文件重新拉取过去，如果没有修改，并不会再次拉取\ngit push 推送本地库到远程库，将本地库的文件覆盖远程库的文件")]),t._v(" "),i("ul",[i("li",[i("p",[i("a",{attrs:{href:"http://rogerdudler.github.io/git-guide/index.zh.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("git基础"),i("OutboundLink")],1)])]),t._v(" "),i("li",[i("p",[i("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/896043488029600",target:"_blank",rel:"noopener noreferrer"}},[t._v("git liaoxuefeng"),i("OutboundLink")],1)])]),t._v(" "),i("li",[i("p",[i("a",{attrs:{href:"https://chinese.freecodecamp.org/news/git-internals-objects-branches-create-repo/",target:"_blank",rel:"noopener noreferrer"}},[t._v("git"),i("OutboundLink")],1)])])]),t._v(" "),i("h3",{attrs:{id:"gitlab-github-git小乌龟-jenkins自动化部署"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-github-git小乌龟-jenkins自动化部署"}},[t._v("#")]),t._v(" Gitlab Github git小乌龟 Jenkins自动化部署")]),t._v(" "),i("h2",{attrs:{id:"npm-yarn"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#npm-yarn"}},[t._v("#")]),t._v(" npm yarn")]),t._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"https://www.zhihu.com/question/20351507",target:"_blank",rel:"noopener noreferrer"}},[t._v("AMD 和 CMD 的区别有哪些？"),i("OutboundLink")],1)])])])}),[],!1,null,null,null);i.default=r.exports}}]);